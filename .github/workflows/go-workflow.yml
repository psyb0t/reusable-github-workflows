name: Go Workflow

on:
  workflow_call:
    inputs:
      go_version:
        description: "Go version to use"
        required: false
        default: "1.24"
        type: string
      test_command:
        description: "Command to run tests"
        required: false
        default: "make test"
        type: string
      lint_command:
        description: "Command to run linting"
        required: false
        default: "make lint"
        type: string
      dep_command:
        description: "Command to download dependencies"
        required: false
        default: "make dep"
        type: string
      debug:
        description: "Debug workflow"
        required: false
        default: false
        type: boolean
    outputs:
      cache-key:
        description: "Cache key for artifacts"
        value: ${{ jobs.setup.outputs.cache-key }}

jobs:
  debug-workflow:
    name: Debug Info
    runs-on: ubuntu-latest
    if: inputs.debug
    steps:
      - name: Debug GitHub context
        run: |
          echo "::group::GitHub Context"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.sha: ${{ github.sha }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.run_number: ${{ github.run_number }}"
          echo "github.run_attempt: ${{ github.run_attempt }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.repository: ${{ github.repository }}"
          echo "::endgroup::"

          echo "::group::Inputs"
          echo "go_version: ${{ inputs.go_version }}"
          echo "test_command: ${{ inputs.test_command }}"
          echo "lint_command: ${{ inputs.lint_command }}"
          echo "dep_command: ${{ inputs.dep_command }}"
          echo "::endgroup::"

  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.set_cache_key.outputs.CACHE_KEY }}
    steps:
      - name: Set cache key
        id: set_cache_key
        run: |
          echo "CACHE_KEY=go-pkg-${{ inputs.go_version }}-${{ github.run_number }}-${{ github.sha }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

  code-checks:
    name: Code Checks
    runs-on: ubuntu-latest
    if: always() && inputs.lint_command != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ inputs.go_version }}
          cache: true

      - name: Check Go cache
        id: go_cache
        run: |
          go version
          go env GOVERSION GOOS GOARCH

      - name: Setup dependencies
        run: ${{ inputs.dep_command }}
      - name: Run code checks
        run: ${{ inputs.lint_command }}

  test:
    name: Test
    runs-on: ubuntu-latest
    if: always() && inputs.test_command != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ inputs.go_version }}
          cache: true

      - name: Check Go cache
        id: go_cache
        run: |
          go version
          go env GOVERSION GOOS GOARCH

      - name: Setup dependencies
        run: ${{ inputs.dep_command }}

      - name: Run tests
        run: |
          echo "Running: ${{ inputs.test_command }}"
          ${{ inputs.test_command }}

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [code-checks, test]
    if: contains(github.ref, 'refs/tags/') && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.code-checks.result == 'success' || needs.code-checks.result == 'skipped')
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ inputs.go_version }}
          cache: true

      - name: Generate changelog
        id: changelog
        run: |
          # Get the tag name
          tag_name=${GITHUB_REF#refs/tags/}
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT

          # Generate changelog from git log
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            prev_tag=$(git describe --tags --abbrev=0 HEAD^)
            echo "## Changes in ${tag_name}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"* %s (%h)" ${prev_tag}..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release ${tag_name}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "ðŸŽ‰ First release of this project!" >> CHANGELOG.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.changelog.outputs.tag_name }}
          name: Release ${{ steps.changelog.outputs.tag_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.tag_name, 'alpha') || contains(steps.changelog.outputs.tag_name, 'beta') || contains(steps.changelog.outputs.tag_name, 'rc') }}
          files: ""
          generate_release_notes: true
          make_latest: ${{ !contains(steps.changelog.outputs.tag_name, 'alpha') && !contains(steps.changelog.outputs.tag_name, 'beta') && !contains(steps.changelog.outputs.tag_name, 'rc') }}
